from flask import Flask, request, render_template
import pandas as pd
import re
from fuzzywuzzy import process

app = Flask(__name__)
excel_file = "construction_project.xlsx"

try:
    df = pd.read_excel(excel_file)
except Exception as e:
    print(f"Error loading data: {str(e)}")
    df = None

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        # Get user name, query, and the form of request
        user_name = request.form.get('user_name')
        user_query = request.form.get('query')

        # Check if user name exists in the access columns
        if check_access(user_name):
            # Process the user's query
            response = process_query(user_query, df)  # Pass df as an argument
            return render_template('result.html', response=response)
        else:
            return "Access denied. Your name is not authorized to view this information."
    else:
        return render_template('index.html')

def check_access(user_name):
    # Check if the user name exists in the access columns
    access_lists = df['Top Access'] + df['access 1']
    for access_list in access_lists:
        if user_name in access_list:
            return True
    return False

def process_query(query, df):
    # Tokenize and normalize the query
    query = query.lower().strip()

    # Check if 'Project Name' column exists in the DataFrame
    if 'Project Name' not in df.columns:
        return "Error: 'Project Name' column not found in the data."

    # Define patterns for structured queries
    structured_query_patterns = [
        # Queries for requesting user ID or password for a project
        (r"(?:I\sneed|show\sme|give\sme)\s(user\s(?:id|and|&)\s?password|password)\s*(?:for|of)\s(?:the\s)?project\s(?P<project_name>.+)$","structured"),
        (r"(?:what(?:'s| is) (?:the)?)?\s(user\s(?:id|and|&)\s?password|password)\s*(?:for|of)\s(?:the\s)?project\s(?P<project_name>.+)$","structured"),
        (r"(?:please\s)?(show\sme|give\sme)\s(user\s(?:id|and|&)\s?password|password)\s*(?:for|of)\s(?:the\s)?(?P<project_name>.+)$","structured"),
        (r"(?:I\sneed|show\sme|give\sme|what's|what\s?is)\s(user\s(?:id|and|&)\s?password|password)\s*(?:for|of)\s(?:the\s)?project\s(?P<project_name>.+)$","structured"),
        (r"(?:please\s)?(show\sme|give\sme)\s(user\s(?:id|and|&)\s?password|password)\s*(?:for|of)\s(?:the\s)?(?P<project_name>.+)$","structured"),

        # Queries for requesting only user ID or only password for a project
        (r"(?:I\sneed|show\sme|give\sme)\s(user\sid)\s*(?:for|of)\s(?:the\s)?project\s(?P<project_name>.+)$", "structured"),
        (r"(?:what(?:'s| is) (?:the)?)?\s(user\sid)\s*(?:for|of)\s(?:the\s)?project\s(?P<project_name>.+)$", "structured"),
        (r"(?:please\s)?(show\sme|give\sme)\s(user\sid)\s*(?:for|of)\s(?:the\s)?(?P<project_name>.+)$", "structured"),
        (r"(?:I\sneed|show\sme|give\sme|what's|what\s?is)\s(user\sid)\s*(?:for|of)\s(?:the\s)?project\s(?P<project_name>.+)$","structured"),
        (r"(?:please\s)?(show\sme|give\sme)\s(user\sid)\s*(?:for|of)\s(?:the\s)?(?P<project_name>.+)$", "structured"),

        # Queries for requesting password only for a project
        (r"(?:I\sneed|show\sme|give\sme)\s(password)\s*(?:for|of)\s(?:the\s)?project\s(?P<project_name>.+)$", "structured"),
        (r"(?:what(?:'s| is) (?:the)?)?\s(password)\s*(?:for|of)\s(?:the\s)?project\s(?P<project_name>.+)$", "structured"),
        (r"(?:please\s)?(show\sme|give\sme)\s(password)\s*(?:for|of)\s(?:the\s)?(?P<project_name>.+)$", "structured"),
        (r"(?:I\sneed|show\sme|give\sme|what's|what\s?is)\s(password)\s*(?:for|of)\s(?:the\s)?project\s(?P<project_name>.+)$","structured"),
        (r"(?:please\s)?(show\sme|give\sme)\s(password)\s*(?:for|of)\s(?:the\s)?(?P<project_name>.+)$", "structured"),

        # Queries for general project information requests
        (r"(?:I\sneed|show\sme|give\sme)\s(information)\s*(?:for|of)\s(?:the\s)?project\s(?P<project_name>.+)$", "structured"),
        (r"(?:what(?:'s| is) (?:the)?)?\s(information)\s*(?:for|of)\s(?:the\s)?project\s(?P<project_name>.+)$", "structured"),
        (r"(?:please\s)?(show\sme|give\sme)\s(information)\s*(?:for|of)\s(?:the\s)?(?P<project_name>.+)$", "structured"),
        (r"(?:I\sneed|show\sme|give\sme|what's|what\s?is)\s(information)\s*(?:for|of)\s(?:the\s)?project\s(?P<project_name>.+)$","structured"),
        (r"(?:please\s)?(show\sme|give\sme)\s(information)\s*(?:for|of)\s(?:the\s)?(?P<project_name>.+)$", "structured"),

        # Queries for requesting both user ID and password for a project
        (r"(?:I\sneed|show\sme|give\sme)\s(user\s(?:id|and|&)\s?password)\s*(?:for|of)\s(?:the\s)?project\s(?P<project_name>.+)$","structured"),
        (r"(?:what(?:'s| is) (?:the)?)?\s(user\s(?:id|and|&)\s?password)\s*(?:for|of)\s(?:the\s)?project\s(?P<project_name>.+)$","structured"),
        (r"(?:please\s)?(show\sme|give\sme)\s(user\s(?:id|and|&)\s?password)\s*(?:for|of)\s(?:the\s)?(?P<project_name>.+)$","structured"),
        (r"(?:I\sneed|show\sme|give\sme)\s(user\s(?:id\s)?(?:and|&)\s?password)\s*(?:for|of)\s(?:the\s)?project\s(?P<project_name>.+)$","structured"),
        (r"(?:what(?:'s| is) (?:the)?)?\s(user\s(?:id\s)?(?:and|&)\s?password)\s*(?:for|of)\s(?:the\s)?project\s(?P<project_name>.+)$","structured"),
        (r"(?:please\s)?(show\sme|give\sme)\s(user\s(?:id\s)?(?:and|&)\s?password)\s*(?:for|of)\s(?:the\s)?(?P<project_name>.+)$","structured"),
        (r"(?:I\sneed|show\sme|give\sme|what's|what\s?is)\s(user\s(?:id\s)?(?:and|&)\s?password)\s*(?:for|of)\s(?:the\s)?project\s(?P<project_name>.+)$","structured"),
        (r"(?:please\s)?(show\sme|give\sme)\s(user\s(?:id\s)?(?:and|&)\s?password)\s*(?:for|of)\s(?:the\s)?(?P<project_name>.+)$","structured"),
        (r"(?:I\sneed|show\sme|give\sme|what's|what\s?is)\s((user\sid\sand\s?password)|(password\sand\s?user\sid))\s*(?:for|of)\s(?:the\s)?project\s(?P<project_name>.+)$","structured"),
        (r"(?:please\s)?(show\sme|give\sme)\s((user\sid\sand\s?password)|(password\sand\s?user\sid))\s*(?:for|of)\s(?:the\s)?(?P<project_name>.+)$","structured"),
        (r"(?:I\sneed|show\sme|give\sme|what's|what\s?is)\s(user\s?id|password)\s*(?:and|&)?\s*(user\s?id|password)\s*(?:for|of)\s(?:the\s)?project\s(?P<project_name>.+)$","structured"),
        (r"(?:please\s)?(show\sme|give\sme)\s(user\s?id|password)\s*(?:and|&)?\s*(user\s?id|password)\s*(?:for|of)\s(?:the\s)?(?P<project_name>.+)$","structured"),
    ]

    # Check if the query matches any structured query pattern
    for pattern, _ in structured_query_patterns:
        match = re.match(pattern, query)
        if match:
            groups = match.groupdict()
            project_name = groups.get('project_name')
            return process_project_info(df, project_name, query)

    try:
        project_name, confidence = process.extractOne(query, df['Project Name'].str.lower())
    except ValueError as e:
        # Handle the case where extractOne() returns too many values
        print(f"Error extracting project name: {e}")
        return "Error extracting project name. Please try again."

    # Check if confidence is below a certain threshold
    if confidence < 80:
        return "Sorry, I couldn't understand the project name. Please try again."

    # Return project information
    return process_project_info(df, project_name, query)
def process_project_info(df, project_name, query):
    project_info = df[df['Project Name'].str.lower() == project_name]
    if project_info.empty:
        return f"No information found for project '{project_name}'."

    # Check for specific information requested
    if "user id" in query and "password" in query:
        return project_info[['User ID', 'Password']].to_dict(orient='records')
    elif "user id" in query:
        return project_info['User ID'].to_dict()
    elif "password" in query:
        return project_info['Password'].to_dict()
    else:
        return project_info.to_dict(orient='records')


if __name__ == '__main__':
    app.run(debug=True)


########################################## backup 2 #############################

from flask import Flask, request, render_template
import pandas as pd
import re
from fuzzywuzzy import process

app = Flask(__name__)
excel_file = "construction_project.xlsx"

try:
    df = pd.read_excel(excel_file)
except Exception as e:
    print(f"Error loading data: {str(e)}")
    df = None

@app.route('/', methods=['GET', 'POST'])
def index():
    query_result = None
    if request.method == 'POST':
        user_name = request.form.get('user_name')
        user_query = request.form.get('query')
        if check_access(user_name):
            query_result = process_query(user_query, df)
    return render_template('index.html', query_result=query_result)
def check_access(user_name):
    # Check if the user name exists in the access columns
    access_lists = df['Top Access'] + df['access 1']
    for access_list in access_lists:
        if user_name in access_list:
            return True
    return False

def process_query(query, df):
    query = query.lower().strip()

    structured_query_patterns = [
        (r"(?:need|show|give|what\sis|what's|i\s?want|please\s)?\s*(?P<info>(user\s?id\s?and\s?password|password\s?and\s?user\s?id|user\s?id|password|information))\s*(?:for|of|from|in|on)?\s?(?:the\sproject\s)?(?P<project_name>.+)$", "structured"),
        (r"(?:(?:give\sme|i\s?want)\s)?(?:user\s?id|id|user)\s?(?:for|of|from|in|on)?\s?(?:the\sproject\s)?(?P<project_name>.+)$", "structured"),
    ]

    for pattern, _ in structured_query_patterns:
        match = re.match(pattern, query)
        if match:
            groups = match.groupdict()
            project_name = groups.get('project_name')
            info_type = groups.get('info', 'information')  # Default to 'information' if not specified
            return process_project_info(df, project_name, info_type)

    try:
        project_name, confidence = process.extractOne(query, df['Project Name'].str.lower())
    except ValueError as e:
        print(f"Error extracting project name: {e}")
        return ["Error extracting project name. Please try again."]

    if confidence < 80:
        return ["Sorry, I couldn't understand the project name. Please try again."]

    return process_project_info(df, project_name, "information")

def process_project_info(df, project_name, info_type):
    project_info = df[df['Project Name'].str.lower() == project_name]
    if project_info.empty:
        return [f"No information found for project '{project_name}'."]

    response = []
    if "user id" in info_type and "password" in info_type:
        response.append(project_info[['User ID', 'Password']].to_dict(orient='records'))
    elif "user id" in info_type:
        response.append(project_info['User ID'].to_dict())
    elif "password" in info_type:
        response.append(project_info['Password'].to_dict())
    else:
        response.append(project_info.to_dict(orient='records'))

    return response
if __name__ == '__main__':
    app.run(debug=True)

################################ BACKUP 3 ##############################

from flask import Flask, request, render_template
import pandas as pd
import re
from fuzzywuzzy import process

app = Flask(__name__)
excel_file = "construction_project.xlsx"

try:
    df = pd.read_excel(excel_file)
except Exception as e:
    print(f"Error loading data: {str(e)}")
    df = None

@app.route('/', methods=['GET', 'POST'])
def index():
    query_result = None
    if request.method == 'POST':
        user_name = request.form.get('user_name')
        user_query = request.form.get('query')

        if check_basic_access(user_name):
            query_result = process_query(user_query, df, user_name)  # Pass user_name to process_query
        else:
            query_result = ["Access denied. You do not have permission to access any project information."]

    return render_template('index.html', query_result=query_result)

def check_basic_access(user_name):
    # Basic access check (can be generalized or skipped if project-specific access is sufficient)
    access_lists = df['admin'] + df['access1']
    for access_list in access_lists:
        if user_name in access_list:
            return True
    return False
def process_query(query, df, user_name):
    query = query.lower().strip()
    response = []

    structured_query_patterns = [
        (r"(?:need|show|give|what\sis|what's|i\s?want|please\s)?\s*(?P<info>user\s?id\s?and\s?password|password\s?and\s?user\s?id|user\s?id|password|information)\s*(?:for|of|from|in|on)?\s?(?:the\sproject\s)?(?P<project_name>.+)$", "structured"),
        (r"(?:(?:give\sme|i\s?want)\s)?(?:user\s?id|id|user)\s?(?:for|of|from|in|on)?\s?(?:the\sproject\s)?(?P<project_name>.+)$", "structured"),
    ]

    for pattern, _ in structured_query_patterns:
        match = re.match(pattern, query)
        if match:
            groups = match.groupdict()
            project_name = groups.get('project_name')
            info_type = groups.get('info', 'information')

            # Check user access for the specific project
            if not check_access(user_name, project_name):
                return ["Access denied. You do not have permission to access this project information."]

            return process_project_info(df, project_name, info_type)

    try:
        project_name, confidence = process.extractOne(query, df['Project Name'].str.lower())
    except Exception as e:
        print(f"Error extracting project name: {e}")
        return ["Error extracting project name. Please try again."]

    if confidence < 80:
        return ["Sorry, I couldn't understand the project name. Please try again."]

    # Check user access for the specific project
    if not check_access(user_name, project_name):
        return ["Access denied. You do not have permission to access this project information."]

    return process_project_info(df, project_name, "information")

def check_access(user_name, project_name):
    project_info = df[df['Project Name'].str.lower() == project_name.lower()]
    if project_info.empty:
        return False  # Project not found

    # Check access in 'access1' and 'admin' columns
    access1 = project_info['access1'].values[0].split(',')  # Assuming names are comma-separated
    admin = project_info['admin'].values[0].split(',')  # Assuming names are comma-separated

    if user_name in access1 or user_name in admin:
        return True
    return False

def process_project_info(df, project_name, info_type):
    project_info = df[df['Project Name'].str.lower() == project_name.lower()]
    if project_info.empty:
        return [f"No information found for project '{project_name}'."]

    response = {}

    if "user id" in info_type and "password" in info_type:
        user_id = project_info['User ID'].values[0]
        password = project_info['Password'].values[0]
        response['Project Name'] = project_name
        response['User ID'] = user_id
        response['Password'] = password
    elif "user id" in info_type:
        user_id = project_info['User ID'].values[0]
        response['Project Name'] = project_name
        response['User ID'] = user_id
    elif "password" in info_type:
        password = project_info['Password'].values[0]
        response['Project Name'] = project_name
        response['Password'] = password
    else:
        response['Project Information'] = project_info.to_dict(orient='records')[0]

    return [response]
if __name__ == '__main__':
    app.run(debug=True)


################### NIXIE RUNNING #################

import pandas as pd
from flask import Flask, request, render_template
import re
from fuzzywuzzy import process

app = Flask(__name__)
excel_file = "construction_project.xlsx"

try:
    df = pd.read_excel(excel_file)
except Exception as e:
    print(f"Error loading data: {str(e)}")
    df = None

@app.route('/', methods=['GET', 'POST'])
def index():
    query_result = []  # Initialize query_result as an empty list
    if request.method == 'POST':
        user_name = request.form.get('user_name')
        user_query = request.form.get('query')

        if check_basic_access(user_name):
            query_result = process_query(user_query, df, user_name)  # Pass user_name to process_query
        else:
            query_result = [{"error": "Access denied. You do not have permission to access any project information."}]

    return render_template('index.html', query_result=query_result)


def check_basic_access(user_name):
    if df is not None:
        access_set = set()  # Use a set to avoid duplicates
        for index, row in df.iterrows():
            try:
                admin_list = json.loads(row['admin']) if row['admin'] else []
                access1_list = json.loads(row['access1']) if row['access1'] else []
                access_set.update([name.strip().lower() for name in admin_list if name])
                access_set.update([name.strip().lower() for name in access1_list if name])
            except json.JSONDecodeError as e:
                print(f"Error decoding JSON in row {index}: {e}")
                continue

        access_list_combined = list(access_set)  # Convert set back to list for debugging
        print(f"Normalized Access List: {access_list_combined}")  # Debug print
        print(f"User Name to Check: {user_name.strip().lower()}")  # Debug print

        if user_name.strip().lower() in access_set:
            return True
    return False

def process_query(query, df, user_name):
    query = query.lower().strip()
    response = []

    structured_query_patterns = [
        (r"(?:need|show|give|what\sis|what's|i\s?want|please\s)?\s*(?P<info>user\s?id\s?and\s?password|password\s?and\s?user\s?id|user\s?id|password|information)\s*(?:for|of|from|in|on)?\s?(?:the\sproject\s)?(?P<project_name>.+)$", "structured"),
        (r"(?:(?:give\sme|i\s?want)\s)?(?:user\s?id|id|user)\s?(?:for|of|from|in|on)?\s?(?:the\sproject\s)?(?P<project_name>.+)$", "structured"),
    ]

    for pattern, _ in structured_query_patterns:
        match = re.match(pattern, query)
        if match:
            groups = match.groupdict()
            project_name = groups.get('project_name')
            info_type = groups.get('info', 'information')

            # Check user access for the specific project
            if not check_access(user_name, project_name):
                return [{"error": f"Access denied. You do not have permission to access {project_name} project information."}]

            response = process_project_info(df, project_name, info_type)
            if isinstance(response, list):
                return response

    try:
        project_name, confidence = process.extractOne(query, df['Project Name'].str.lower())
    except Exception as e:
        print(f"Error extracting project name: {e}")
        return [{"error": "Error extracting project name. Please try again."}]

    if confidence < 80:
        return [{"error": "Sorry, I couldn't understand the project name. Please try again."}]

    # Check user access for the specific project
    if not check_access(user_name, project_name):
        return [{f"Access denied. {user_name}\n You do not have permission to access {project_name} project information."}]

    return process_project_info(df, project_name, "information")


def check_access(user_name, project_name):
    user_name = user_name.strip().lower()
    project_info = df[df['Project Name'].str.lower() == project_name.lower()]
    if project_info.empty:
        return False

    try:
        access1 = json.loads(project_info['access1'].values[0]) if project_info['access1'].values[0] else []
        admin = json.loads(project_info['admin'].values[0]) if project_info['admin'].values[0] else []
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON: {e}")
        return False

    access1 = [name.strip().lower() for name in access1 if name]
    admin = [name.strip().lower() for name in admin if name]

    return user_name in access1 or user_name in admin

def process_project_info(df, project_name, info_type):
    project_info = df[df['Project Name'].str.lower() == project_name.lower()]
    if project_info.empty:
        return [f"No information found for project '{project_name}'."]

    response = {}

    if "user id" in info_type and "password" in info_type:
        user_id = project_info['User ID'].values[0]
        password = project_info['Password'].values[0]
        response['Project Name'] = project_name
        response['User ID'] = user_id
        response['Password'] = password
    elif "user id" in info_type:
        user_id = project_info['User ID'].values[0]
        response['Project Name'] = project_name
        response['User ID'] = user_id
    elif "password" in info_type:
        password = project_info['Password'].values[0]
        response['Project Name'] = project_name
        response['Password'] = password
    else:
        response['Project Information'] = project_info.to_dict(orient='records')[0]

    return [response]
if __name__ == '__main__':
    app.run(debug=True)


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$  21.05.2024 Backup of Nixie $$$$$$$$$$$$$$$$$$$$

import pandas as pd
from flask import Flask, request, render_template
import re
from fuzzywuzzy import process
import json

app = Flask(__name__)
excel_file = "construction_project.xlsx"

try:
    df = pd.read_excel(excel_file)
except Exception as e:
    print(f"Error loading data: {str(e)}")
    df = None


@app.route('/', methods=['GET', 'POST'])
def index():
    query_result = []  # Initialize query_result as an empty list
    if request.method == 'POST':
        user_name = request.form.get('user_name')
        user_query = request.form.get('query')

        if check_basic_access(user_name):
            query_result = process_query(user_query, df, user_name)  # Pass user_name to process_query
        else:
            query_result = [{"error": "Access denied. You do not have permission to access any project information."}]

    return render_template('index.html', query_result=query_result)


def check_basic_access(user_name):
    if df is not None:
        access_set = set()  # Use a set to avoid duplicates
        for index, row in df.iterrows():
            try:
                admin_list = json.loads(row['admin']) if row['admin'] else []
                access1_list = json.loads(row['access1']) if row['access1'] else []
                access_set.update([name.strip().lower() for name in admin_list if name])
                access_set.update([name.strip().lower() for name in access1_list if name])
            except json.JSONDecodeError as e:
                print(f"Error decoding JSON in row {index}: {e}")
                continue

        access_list_combined = list(access_set)  # Convert set back to list for debugging
        print(f"Normalized Access List: {access_list_combined}")  # Debug print
        print(f"User Name to Check: {user_name.strip().lower()}")  # Debug print

        if user_name.strip().lower() in access_set:
            return True
    return False


def process_query(query, df, user_name):
    query = query.lower().strip()
    response = []

    structured_query_patterns = [
        (
        r"(?:need|show|give|what\sis|what's|i\s?want|please\s)?\s*(?P<info>user\s?id\s?and\s?password|password\s?and\s?user\s?id|user\s?id|password|information)\s*(?:for|of|from|in|on)?\s?(?:the\sproject\s)?(?P<project_name>.+)$",
        "structured"),
        (
        r"(?:(?:give\sme|i\s?want)\s)?(?:user\s?id|id|user)\s?(?:for|of|from|in|on)?\s?(?:the\sproject\s)?(?P<project_name>.+)$",
        "structured"),

        ##Project Name only
        (r"(?:need|show|give|what\sis|what's|i\s?want|please\s)?\s*(?P<info>user\s?id\s?and\s?password|password\s?and\s?user\s?id|user\s?id|password|information)\s*(?:for|of|from|in|on)?\s?(?:the\sproject\s)?(?P<project_name>.+)$","structured"),
        (r"(?:(?:give\sme|i\s?want)\s)?(?:user\s?id|id|user)\s?(?:for|of|from|in|on)?\s?(?:the\sproject\s)?(?P<project_name>.+)$","structured"),
        (r"(?:what\s?is|what's|what\sis\s?the|may\s?I\splease\s?have|can\s?u\s?give\s?me|i\s?need|give\s?me|i\s?want|please\s?give\s?me|i\s?want)\s?(?P<info>password|password\s?of|password\s?for|gimme)\s?(?:for|of|from|in|on)?\s?(?:the\sproject\s)?(?P<project_name>.+)$","password"),
        ##user id
        (r"(?:give\sme|i\s?want|please\s?give\s?me|provide\sme|i\s?need|may\s?I\splease\s?have|can\s?you\s?give\s?me|could\s?you\s?provide\s?me)\s?(?:the)?\s?(?:user\s?id|id|user)\s?(?:for|of|from|in|on)?\s?(?:the\sproject\s)?(?P<project_name>.+)$",
        "user_id"),

        ## userid and password
        (r"(?:give\sme|i\s?want|please\s?give\s?me|provide\sme|i\s?need|may\s?I\splease\s?have|can\s?you\s?give\s?me|could\s?you\s?provide\s?me)\s?(?:the)?\s?(?:user\s?id\s?and\s?password|password\s?and\s?user\s?id|user\s?id\s?,?\s?password|password\s?,?\s?user\s?id)\s?(?:for|of|from|in|on)?\s?(?:the\sproject\s)?(?P<project_name>.+)$",
         "user_id_password")

    ]

    for pattern, _ in structured_query_patterns:
        match = re.match(pattern, query)
        if match:
            groups = match.groupdict()
            project_name = groups.get('project_name')
            info_type = groups.get('info', 'information')

            # Check user access for the specific project
            if not check_access(user_name, project_name):
                return [{
                            "error": f"Access denied. You do not have permission to access {project_name} project information."}]

            response = process_project_info(df, project_name, info_type)
            if isinstance(response, list):
                return response

    try:
        project_name, confidence = process.extractOne(query, df['Project Name'].str.lower())
    except Exception as e:
        print(f"Error extracting project name: {e}")
        return [{"error": "Error extracting project name. Please try again."}]

    if confidence < 80:
        return [{"error": "Sorry, I couldn't understand the project name. Please try again."}]

    # Check user access for the specific project
    if not check_access(user_name, project_name):
        return [
            {f"Access denied. {user_name}\n You do not have permission to access {project_name} project information."}]

    return process_project_info(df, project_name, "information")


def check_access(user_name, project_name):
    user_name = user_name.strip().lower()
    project_info = df[df['Project Name'].str.lower() == project_name.lower()]
    if project_info.empty:
        return False

    try:
        access1 = json.loads(project_info['access1'].values[0]) if project_info['access1'].values[0] else []
        admin = json.loads(project_info['admin'].values[0]) if project_info['admin'].values[0] else []
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON: {e}")
        return False

    access1 = [name.strip().lower() for name in access1 if name]
    admin = [name.strip().lower() for name in admin if name]

    return user_name in access1 or user_name in admin


def process_project_info(df, project_name, info_type):
    project_info = df[df['Project Name'].str.lower() == project_name.lower()]
    if project_info.empty:
        return [f"No information found for project '{project_name}'."]

    response = {}

    if "user id" in info_type and "password" in info_type:
        user_id = project_info['User ID'].values[0]
        password = project_info['Password'].values[0]
        response['Project Name'] = project_name
        response['User ID'] = user_id
        response['Password'] = password
    elif "user id" in info_type:
        user_id = project_info['User ID'].values[0]
        response['Project Name'] = project_name
        response['User ID'] = user_id
    elif "password" in info_type:
        password = project_info['Password'].values[0]
        response['Project Name'] = project_name
        response['Password'] = password
    else:
        response['Project Information'] = project_info.to_dict(orient='records')[0]

    return [response]


if __name__ == '__main__':
    app.run(debug=True)


    #############################################

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nixie</title>
    <link rel="stylesheet" href="static/styles.css">
</head>
<body>
    <div class="nixielogo">
        <img src="static/logo.png" alt="Nixie Logo">
    </div>
    <div class = "nixieName">
        <img src="static/nixie.png">

    </div>

    <div class="user-name-input">
        <form id="userNameForm" method="post">
            <label for="user_name"> </label>
            <input type="text" id="user_name" name="user_name" required placeholder="Secrete UserID">
            <button type="submit">Start Chat</button>
        </form>
    </div>

    <div class="chat-container" style="display: none;"> <!-- Modified: Initially hidden -->
        <div id="chatBox" class="chat-box"></div>
        <form id="chatForm" class="input-form">
            <input type="text" id="query" placeholder="Type your message..." autocomplete="off" required>
            <div id="suggestions"></div>
            <button type="submit">Send</button>
        </form>
    </div>


    <div class="common-prompts">
        <p>Prompt Ease!</p>
        <div class="prompt" onclick="updateInput('user id and password for')">Want user id and password?</div>
        <div class="prompt" onclick="updateInput('password for')">Just looking for password?</div>
        <div class="prompt" onclick="updateInput('user id for')">Maybe just the user id?</div>
        <hr> <br>
        <p>Shortcut Prompts!</p>
        <div class="prompt" onclick="updateInput('please fill the credentials to portal')">Auto fill credentials?</div>
    </div>

    <footer class="developer-credit">
        <p>_soham 😎</p>
    </footer>

    <script>
        function updateInput(promptText) {
            document.getElementById('query').value = promptText;
            document.getElementById('suggestions').style.display = 'none';
        }

        document.addEventListener('DOMContentLoaded', function () {
            const userNameForm = document.getElementById('userNameForm');
            const chatContainer = document.querySelector('.chat-container');
            const commonPrompts = document.querySelector('.common-prompts');
            let userName = '';

            userNameForm.addEventListener('submit', function (event) {
                event.preventDefault();
                userName = document.getElementById('user_name').value.trim();
                if (userName !== '') {
                    document.querySelector('.user-name-input').style.display = 'none';
                    chatContainer.style.display = 'flex'; // Display the chat container
                    commonPrompts.style.display = 'block';
                }
            });

            const chatBox = document.getElementById('chatBox');
            const chatForm = document.getElementById('chatForm');
            const suggestionsDiv = document.getElementById('suggestions');

            suggestionsDiv.style.display = 'none';

            chatForm.addEventListener('input', function (event) {
                const inputText = event.target.value.trim();
                if (/of\s|for\s/i.test(inputText)) {
                    const words = inputText.split(/\s+/);
                    const lastWord = words[words.length - 1];
                    if (lastWord.length >= 3) {
                        getSuggestions(lastWord);
                    } else {
                        suggestionsDiv.style.display = 'none';
                    }
                } else {
                    suggestionsDiv.style.display = 'none';
                }
            });

            function getSuggestions(inputText) {
                fetch('/get_matching_projects?input=' + inputText, { method: 'GET' })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.length > 0) {
                        const topSuggestions = getTopSuggestions(data, 4);
                        displaySuggestions(topSuggestions);
                    } else {
                        suggestionsDiv.style.display = 'none';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            }

            function getTopSuggestions(suggestions, count) {
                return suggestions.slice(0, count);
            }

            function displaySuggestions(projects) {
                suggestionsDiv.innerHTML = '';
                const dropdown = "<ul>" + projects.map(project => "<li>" + project + "</li>").join("") + "</ul>";
                suggestionsDiv.innerHTML = dropdown;
                suggestionsDiv.style.display = 'block';
            }

            suggestionsDiv.addEventListener('click', function (event) {
                const clickedSuggestion = event.target.textContent;
                const queryInput = document.getElementById('query');
                const inputText = queryInput.value.trim();
                const words = inputText.split(/\s+/);
                words[words.length - 1] = clickedSuggestion;
                queryInput.value = words.join(' ');
                queryInput.focus();
                suggestionsDiv.style.display = 'none';
            });

            chatForm.addEventListener('submit', function (event) {
                event.preventDefault();
                const queryInput = document.getElementById('query');
                const query = queryInput.value.trim();
                if (query !== '') {
                    appendUserMessage(query);
                    queryInput.value = '';
                    sendQueryToServer(query);
                }
                suggestionsDiv.style.display = 'none';
            });

            function appendUserMessage(message) {
                const userMessageElement = document.createElement('div');
                userMessageElement.classList.add('message', 'user-message');
                userMessageElement.textContent = message;
                chatBox.appendChild(userMessageElement);
            }

            function appendGPT2Message(message) {
                const gpt2MessageElement = document.createElement('div');
                gpt2MessageElement.classList.add('message', 'gpt2-message');
                gpt2MessageElement.textContent = message;
                chatBox.appendChild(gpt2MessageElement);
            }

            function sendQueryToServer(query) {
                fetch('/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        user_name: userName,
                        query: query
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.error) {
                        appendGPT2Message(data.error);
                    } else if (data.length > 0) {
                        const queryResult = data[0];
                        let resultText = '';
                        for (const key in queryResult) {
                            if (queryResult.hasOwnProperty(key)) {
                                resultText += `${key}: ${queryResult[key]}\n`;
                            }
                        }
                        appendGPT2Message(resultText);
                    } else {
                        console.error('Unexpected response format:', data);
                        appendGPT2Message("Sorry, an unexpected error occurred. Please try again later.");
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    appendGPT2Message("Sorry, an error occurred. Please try again later.");
                });
            }
        });
    </script>
</body>
</html>